library(‘DESeq2’)
library(‘GenomicAlignments’)
library(‘GenomicFeatures’)

```{r prepare_files_for_deseq_all_samples}

#creating feature format object compatible with DEXSeq from GFF3 file.
mtb.txdb = makeTxDbFromGFF(file="final_gff3_26.6.gff3", format="gff", dataSource="ensemblgenomes", organism="Mycobacterium tuberculosis")

#Note that makeTxDBFromGFF will drop operons where the genes are not separated by at least one nucleotide (because it expects introns to separate all exons) - hence some operons will be lost.

#creating a sorted GRanges object specifying the range for each exon within the gene
exonparts = exonicParts(mtb.txdb, linked.to.single.gene.only=TRUE)

#creating an object containing BAM files
bamDir = "C:/Users/Ambreen Anwar/Documents/BAMfiles"
fls = list.files( bamDir, pattern="bam$", full=TRUE )
bamlst = BamFileList( fls, index=character(), yieldSize=100000, asMates=TRUE )

#check the sequence name
seqinfo(bamlst[1])
#checking if these names agree with names in mtb.txdb
seqnames(seqinfo(bamlst[1])) == as.vector(seqnames(exonparts))[1]
#renaming them
seqlevels(exonparts) <- sub("Chromosome", "", seqnames(seqinfo(bamlst[1])))
#check it worked
seqnames(exonparts)

#alternative method to HT-Seq-count and featurecouts. Creates an object containing the counts for each exon or feature overlapping in reads.
se = summarizeOverlaps( exonparts,
                        bamlst,
                        mode="Union",
                        singleEnd=FALSE,
                        ignore.strand=FALSE,
                        inter.feature=FALSE,
                        fragments=TRUE )
```


#using Deseq to plot dispersion estimates without normalisation

```{r DESeq_dispersion_estimation_plot_exon-level_all_samples}

#extract count data from summarised experiment
countdata <- assay( se )
head( countdata )

#forming metadata on each of the samples (the “columns” of the count table)
rownames(col_Data) <- c("SRR1917694_sorted.bam","SRR1917695_sorted.bam", "SRR1917696_sorted.bam","SRR1917697_sorted.bam","SRR1917698_sorted.bam","SRR1917699_sorted.bam","SRR1917700_sorted.bam","SRR1917701_sorted.bam","SRR1917702_sorted.bam","SRR1917703_sorted.bam","SRR1917704_sorted.bam","SRR1917705_sorted.bam", "SRR1917706_sorted.bam","SRR1917707_sorted.bam","SRR1917708_sorted.bam","SRR1917709_sorted.bam","SRR1917710_sorted.bam","SRR1917711_sorted.bam","SRR1917712_sorted.bam","SRR1917713_sorted.bam","SRR1917714_sorted.bam","SRR1917715_sorted.bam")
head(col_Data)

#running deseq for exon level differential expression analysis of all samples
ddsFullCountTable <- DESeqDataSetFromMatrix(countData = countdata,colData = col_Data, design = ~ sample_title)
ddsFCT <- DESeq(ddsFullCountTable)

#plotting dispersion estimation of all samples without size factor normalisation method.
plotDispEsts(ddsFCT)
```
