#install packages

if (!requireNamespace("BiocManager", quietly = TRUE))
    install.packages("BiocManager")
BiocManager::install("DEXSeq")

if (!requireNamespace("BiocManager", quietly = TRUE))
    install.packages("BiocManager")
BiocManager::install("DESeq2")

if (!requireNamespace("BiocManager", quietly = TRUE))
    install.packages("BiocManager")
BiocManager::install("GenomicAlignments")

if (!requireNamespace("BiocManager", quietly = TRUE))
    install.packages("BiocManager")
BiocManager::install("GenomicFeatures")

install.packages("writexl")

library(‘DEXSeq’)
library(‘DESeq2’)
library(‘GenomicAlignments’)
library(‘GenomicFeatures’)
library("writexl")


```{r prepare_files_for_dexseq_all_samples}

#creating feature format object compatible with DEXSeq from GFF3 file.
mtb.txdb = makeTxDbFromGFF(file="final_gff3_26.6.gff3", format="gff", dataSource="ensemblgenomes", organism="Mycobacterium tuberculosis")

#Note that makeTxDBFromGFF will drop operons where the genes are not separated by at least one nucleotide (because it expects introns to separate all exons) - hence some operons will be lost.

#creating a sorted GRanges object specifying the range for each exon within the gene
exonparts = exonicParts(mtb.txdb, linked.to.single.gene.only=TRUE)

#creating an object containing BAM files
bamDir = "C:/Users/Ambreen Anwar/Documents/BAMfiles"
fls = list.files( bamDir, pattern="bam$", full=TRUE )
bamlst = BamFileList( fls, index=character(), yieldSize=100000, asMates=TRUE )
#check the sequence name
seqinfo(bamlst[1])
#checking if these names agree with names in mtb.txdb
seqnames(seqinfo(bamlst[1])) == as.vector(seqnames(exonparts))[1]
#renaming them
seqlevels(exonparts) <- sub("Chromosome", "", seqnames(seqinfo(bamlst[1])))
#check it worked
seqnames(exonparts)

#alternative method to HT-Seq-count and featurecouts. Creates an object containing the counts for each exon or feature overlapping in reads.
se = summarizeOverlaps( exonparts,
                        bamlst,
                        mode="Union",
                        singleEnd=FALSE,
                        ignore.strand=FALSE,
                        inter.feature=FALSE,
                        fragments=TRUE )
```


#running DEXSeq analysis
```{r dexseq_run_all_samples}

library(‘DEXSeq’)
#renaming columns to match experimental conditions 
colData(se)$condition = c("butyrate", "butyrate", "butyrate", "butyrate_plus_glucose", "butyrate_plus_glucose", "butyrate_plus_glucose", "glucose", "tyloxapol_pH5.5", "tyloxapol_pH5.5", "tyloxapol_pH7.0", "tyloxapol_pH7.0", "low_iron_1week", "low_iron_1week", "low_iron_1week", "low_iron_1day", "low_iron_1day", "low_iron_1day", "high_iron", "high_iron", "high_iron", "glucose", "glucose")

#making the ‘se’ object created, which contains exonic count data, compatible with DEXSeq
dxd = DEXSeqDataSetFromSE( se, design= ~ sample + exon + condition:exon )
#examine the object
colData(dxd)
head( counts(dxd), 5 )
split( seq_len(ncol(dxd)), colData(dxd)$exon )
head( rowRanges(dxd), 3 )
sampleAnnotation( dxd )

#normalise the counts
dxd = estimateSizeFactors( dxd )

#estimate dispersions
dxd = estimateDispersions( dxd )
#plotting dispersion estimation of all samples wtih size factor normalisation method.
plotDispEsts(dxd)

```

```{DEXSeq_analysis_Fe_samples}

#creating an object containing BAM files with read from varied iron concentration conditions
fe_bamDir = "C:/Users/Ambreen Anwar/Documents/BAMfiles/bamfiles_fe"

fe_fls = list.files( fe_bamDir, pattern="bam$", full=TRUE )

fe_bamlst = BamFileList( fe_fls, index=character(), yieldSize=100000, asMates=TRUE )

#creating an object containing count data for these data
fe_se = summarizeOverlaps( exonparts,
                           fe_bamlst,
                           mode="Union",
                           singleEnd=FALSE,
                           ignore.strand=FALSE,
                           inter.feature=FALSE,
                           fragments=TRUE )

#matching column names to experiemtnal condition
colData(fe_se)$condition = c("high_iron", "high_iron", "high_iron", "low_iron_1day", "low_iron_1day", "low_iron_1day", "low_iron_1week", "low_iron_1week", "low_iron_1week")
#creating object compatible with DEXSeq for analysis
fe_dxd = DEXSeqDataSetFromSE( fe_se, design= ~ sample + exon + condition:exon )

#normalise data
fe_dxd = estimateSizeFactors( fe_dxd )
#estimate and plot dispersion/variance of data
fe_dxd = estimateDispersions( fe_dxd )
pdf("DispEsts_fe.pdf")                                  
plotDispEsts( fe_dxd )
dev.off()

#testing for differential exon usage
fe_dxd = testForDEU( fe_dxd )

#summarising significant results from this test and estimating fold changes on a log2 scale into a dataframe
dxr_fe = DEXSeqResults( fe_dxd )

fe_dxd = estimateExonFoldChanges( fe_dxd, fitExpToVar="condition", denominator = 'high_iron'
dxr_fe = DEXSeqResults( fe_dxd )

dxr_fe.sig <- as.data.frame(dxr_fe[dxr_fe$padj < 0.1 & !is.na(dxr_fe$padj),])
write_xlsx(dxr_fe.sig,"C:/Users/Ambreen Anwar/Documents/dxr_fe.xlsx")

```


```{r DEXSeq_butyrate+glucose_samples}
#creating an object containing BAM files with read from varied carbon source conditions
bg_bamDir = "C:/Users/Ambreen Anwar/Documents/BAMfiles/bamfiles_but.glu"

bg_fls = list.files( bg_bamDir, pattern="bam$", full=TRUE )

bg_bamlst = BamFileList(bg_fls, index=character(), yieldSize=100000, asMates=TRUE )
#creating an object containing count data for these data
bg_se = summarizeOverlaps( exonparts,
                           bg_bamlst,
                           mode="Union",
                           singleEnd=FALSE,
                           ignore.strand=FALSE,
                           inter.feature=FALSE,
                           fragments=TRUE )
#matching column names to experiemtnal condition
colData(bg_se)$condition = c("butyrate", "butyrate", "butyrate", "butyrate+glucose", "butyrate+glucose", "butyrate+glucose", "glucose", "glucose", "glucose")
#creating object compatible with DEXSeq for analysis
bg_dxd = DEXSeqDataSetFromSE( bg_se, design= ~ sample + exon + condition:exon )

#normalisation
bg_dxd = estimateSizeFactors( bg_dxd )
#estimate and plot dispersions
bg_dxd = estimateDispersions(bg_dxd )
plotDispEsts( bg_dxd )

#testing for differntial exon usage
bg_dxd = testForDEU( bg_dxd )

#summarising significant results from this test and estimating fold changes on a log2 scale into a dataframe
dxr_bg = DEXSeqResults( bg_dxd )
bg_dxd = estimateExonFoldChanges( bg_dxd, fitExpToVar="condition", denominator = 'butyrate+glucose')
dxr_bg = DEXSeqResults( bg_dxd )
dxr_bg.sig <- as.data.frame(dxr_bg[dxr_bg$padj < 0.1 & !is.na(dxr_bg$padj),])
write_xlsx(dxr_bg.sig,"C:/Users/Ambreen Anwar/Documents/dxr_bg.xlsx")
```

```{r DEXseq_analysis_tyloxapol_samples}

#creating an object containing BAM files with read from varied pH conditions
ty_bamDir = "C:/Users/Ambreen Anwar/Documents/BAMfiles/bamfiles_tyloxapol"
ty_fls = list.files( ty_bamDir, pattern="bam$", full=TRUE )
ty_bamlst = BamFileList(ty_fls, index=character(), yieldSize=100000, asMates=TRUE )

#creating an object containing count data for these data
ty_se = summarizeOverlaps( exonparts,
                           ty_bamlst,
                           mode="Union",
                           singleEnd=FALSE,
                           ignore.strand=FALSE,
                           inter.feature=FALSE,
                           fragments=TRUE )

#matching column names to experiemtnal condition
colData(ty_se)$condition = c("tyloxapol pH7.0", "tyloxapol pH7.0", "tyloxapol pH5.5", "tyloxapol pH5.5")

c#creaitng an object compatible with DEXSeq for analysis
ty_dxd = DEXSeqDataSetFromSE( ty_se, design= ~ sample + exon + condition:exon )

#normalisation
ty_dxd = estimateSizeFactors( ty_dxd )
#estimate and plot dispersions
ty_dxd = estimateDispersions( ty_dxd )
plotDispEsts( ty_dxd )

#testing for differential exon usage
ty_dxd = testForDEU( ty_dxd )

#summarising significant results from this test and estimating fold changes on a log2 scale into a dataframe
dxr_ty = DEXSeqResults( ty_dxd )
ty_dxd = estimateExonFoldChanges( ty_dxd, fitExpToVar="condition")
dxr_ty = DEXSeqResults( ty_dxd )
dxr_ty.sig <- as.data.frame(dxr_ty[dxr_ty$padj < 0.1 & !is.na(dxr_ty$padj),])
write_xlsx(dxr_ty.sig,"C:/Users/Ambreen Anwar/Documents/dxr_bg.xlsx")

```

